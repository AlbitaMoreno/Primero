//
// CURSO 2015-2016
// Alba Moreno Ontiveros
// 
//Matriz2D_1_ConstructorCopia.cpp 
// 
/***************************************************************************/

#include <iostream>
#include "Matriz2D_1_ConstructorCopia.h"

using namespace std;

/********************************************************************************************/
/*******************************************************************************************/
//
//	Constructores y destructor
//	
/********************************************************************************************/
/*******************************************************************************************/

Matriz2D_1 :: Matriz2D_1(){	//constructor ain argumentos
	
	filas = 0;
	columnas= 0;

	ReservaMem(filas,columnas);
}

/********************************************************************************************/
/*******************************************************************************************/

Matriz2D_1 :: Matriz2D_1(int cuadrada){		//constructor que crea una matriz rectangular
	filas = columnas = cuadrada;
	ReservaMem(filas,columnas);
}

/********************************************************************************************/
/*******************************************************************************************/

Matriz2D_1 :: Matriz2D_1(int fils, int cols){	//constructor con  dos argumentos
	filas = filas;
	columnas = cols;

	ReservaMem(filas, columnas);
}

/********************************************************************************************/
/*******************************************************************************************/

Matriz2D_1 :: Matriz2D_1(int fils, int cols, TipoBase valor){
	filas = fils;
	columnas = cols;
	ReservaMem(filas,columnas);
	InicializaMismoValor(valor);

}

/********************************************************************************************/
/*******************************************************************************************/

Matriz2D_1 :: Matriz2D_1(const Matriz2D_1 & otro){
	ReservaMem(otro.filas, otro.columnas);
	Copia(otro);
}

/********************************************************************************************/
/*******************************************************************************************/

Matriz2D_1 :: ~Matriz2D_1(){	//destructor
	LiberaMem();
}

/********************************************************************************************/
/*******************************************************************************************/
//
//	MÉTODOS PÚBLICOS
//	
/********************************************************************************************/
/*******************************************************************************************/

void Matriz2D_1 :: InicializaMismoValor(TipoBase valor){
	for(int i = 0; i < filas; i++){
		for(int j = 0; j < columnas; j++){
			datos[i][j] = valor;
		}
	}
}

/********************************************************************************************/
/*******************************************************************************************/

void Matriz2D_1 :: ModificarValor (int fila, int col, TipoBase val){
	if(fila < filas){
		if(col < columnas)
			datos[fila][col] = val;
	}
}

/********************************************************************************************/
/*******************************************************************************************/

TipoBase Matriz2D_1 :: LeerValor(int fila, int col)const{
	if(fila < filas){
		if(col < columnas)
			return(datos[fila][col]);
	}
}	

/********************************************************************************************/
/*******************************************************************************************/

bool Matriz2D_1 :: MatrizVacia(){
	bool vacia = false;

	if(datos == 0)
		vacia = true;

	return(vacia);
}

/********************************************************************************************/
/*******************************************************************************************/

void Matriz2D_1 :: Pinta()const{
	for(int i = 0; i < filas; i++){
		for(int j = 0; j < columnas;j++){
			cout << " " << LeerValor(i,j);
		}
		cout << endl;
	}
}

/********************************************************************************************/
/*******************************************************************************************/

void Matriz2D_1 :: Inicializa(const TipoBase valor){	//si no se le pasa un parámetro tiene un valor por defecto, el 0
	InicializaMismoValor(valor);
}

/********************************************************************************************/
/*******************************************************************************************/
//
//	MÉTODOS PRIVADOS
//	
/********************************************************************************************/
/*******************************************************************************************/

void Matriz2D_1 :: ReservaMem(int filas, int columnas){
	//Primero reservo el vector que apuntará a las filas

	datos = new TipoBase *[filas];

	//reservo la memoria para cada fila

	for(int i = 0; i < filas;i++)
		datos[i] = new TipoBase [columnas];
}

/********************************************************************************************/
/*******************************************************************************************/

void Matriz2D_1 :: LiberaMem(){
	//Libero la memoria que ocupan las filas
	if(datos){
		for (int i = 0; i < filas; i++)
			delete [] datos[i];

		//Libero la memoria ocupada por el vector datos;

		delete [] datos;
	}	
}

/********************************************************************************************/
/*******************************************************************************************/

void Matriz2D_1 :: Copia(const Matriz2D_1 &otro){
	filas = otro.filas;
	columnas = otro.columnas;

	for(int i = 0; i < filas; i++){
		for(int j = 0; j < columnas; j++)
			datos[i][j] = otro.datos[i][j];
	}
}

