//
// CURSO 2015-2016
// Alba Moreno Ontiveros
// 
// MiPila.cpp
// 
//
/***************************************************************************/

/********************************************************************************************/
/*******************************************************************************************/
//
//	Constructores y destructor
//	
/********************************************************************************************/
/*******************************************************************************************/
//sin argumentos, Pila vacía
#include "MiPila.h"
#include <iostream>

using namespace std;

MiPila :: MiPila(){
	num_nodos = 0;
	fin = l;
	ReservaMem();
}


MiPila :: MiPila(const MiPila &otro){
	ReservaMem();
	CopiarDatos(otro);
}

MiPila :: ~MiPila(){
	LiberaMem();
}

/********************************************************************************************/
/*******************************************************************************************/
//
//	MÉTODOS PÚBLICOS
//	
/********************************************************************************************/
/*******************************************************************************************/

bool MiPila :: PilaVacia()const{
	bool vacio = false;

	if(!l)
		vacio = true;

	return(vacio);
}

/********************************************************************************************/
/*******************************************************************************************/

void MiPila :: AniadeValor(TipoBase valor){
	if(!l){
		ReservaPrimerNodo(valor);
		fin = l;
	}
	else{
		fin->sig = new Nodo;
		fin->info = valor;
		fin->sig = 0;
		num_nodos++;
	}
}

/********************************************************************************************/
/*******************************************************************************************/

TipoBase MiPila :: Extraer(){
	PNodo aux = l;
	TipoBase valor = 0;

	if(l){
		valor = fin->info;

		delete fin;

		while(aux->sig != 0){
			aux = aux->sig;
		}

		aux->sig= 0;
		fin = aux;
		
		aux = 0;
		num_nodos--;
	}

	return (valor);
}

/********************************************************************************************/
/*******************************************************************************************/

TipoBase MiPila :: LeerTope()const{
	cout << "Tope-> " << fin->info << endl;
}

/********************************************************************************************/
/*******************************************************************************************/
//
//	MÉTODOS PRIVADOS
//	
/********************************************************************************************/
/*******************************************************************************************/

void MiPila :: ReservaMem(){
	//si no recive ningún argumento, crea una Pila vacía
	l = 0;
}

/********************************************************************************************/
/*******************************************************************************************/

void MiPila :: ReservaPrimerNodo(TipoBase v){
	l = new Nodo;

	l->info = v;
	l->sig = 0;
}

/********************************************************************************************/
/*******************************************************************************************/

void MiPila :: LiberaMem(){
	
	if(l) { // Prevenir de la Pila vacía

		PNodo aux = l; // Colocar aux al principio

		while (aux->sig != 0) {
			aux = aux->sig;	//adelantar aux
			delete l;	//borrar l
			l = aux;	//actualizar l
		}
		delete l; // Borrar el único nodo que queda
	}
}

/********************************************************************************************/
/*******************************************************************************************/

void MiPila :: CopiarDatos(const MiPila &otro){
	num_nodos = otro.num_nodos;
	
	PNodo aux = l;
	PNodo aux2 = otro.l;

	if(l){
		for(int i = 0; i < num_nodos; i++){
			aux->info = aux2->info;
			aux = aux->sig;
			aux2 = aux2->sig;
		}
	}
}